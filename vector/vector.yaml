sources:
  vector_metrics:
    type: "internal_metrics"
    scrape_interval_secs: 10
  # metrics_input:
  #   type: "prometheus_scrape"
  #   endpoints: [ "http://envoy:19010/stats/prometheus?filter=downstream_rq_total" ]
  #   scrape_interval_secs: 3
  #   scrape_timeout_secs: 5
  statsd:
    type: "statsd"
    address: "0.0.0.0:9125"
    mode: "tcp"
    sanitize: false
transforms:
  enforcer_filter:
    type: filter
    inputs: [statsd]
    condition: contains(string!(.name),"downstream_rq_total") == true
      # type: vrl
      # source: match!(.name, r'.*.downstream_rq_total')
  enforcer_metrics_to_logs:
    type: metric_to_log
    inputs: [enforcer_filter]
  license_metering:
    type: remap
    drop_on_abort: true
    inputs: [enforcer_metrics_to_logs]
    source: |-
      # only keep downstream_rq_total metrics
      if !contains(string!(.name), "downstream_rq_total") {
        abort;
      }
      #set logtype
      .logtype = "Metric";
      .metric = .name;
      del(.name);
      .value = .counter.value;
      del(.counter)
      .fluentbit_ts = .timestamp;
      del(.timestamp)
      del(.kind)
sinks:
  out:
    type: "blackhole"
    inputs: ["metrics_input"]
  # print:
  #   type: "console"
  #   inputs: ["metrics_input"]
  #   encoding:
  #     codec: "json"
  #     json:
  #       pretty: true
  promethues_metrics:
    type: "prometheus_exporter"
    inputs: ["vector_metrics"]
    address: "0.0.0.0:2025"
    flush_period_secs: 60
api:
  enabled: true
  address: "127.0.0.1:8686"
  playground: true
# Set global options
data_dir: "/var/lib/vector"